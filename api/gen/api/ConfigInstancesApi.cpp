/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ConfigInstancesApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string ConfigInstancesApi::base = "/agent/v1";

ConfigInstancesApi::ConfigInstancesApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void ConfigInstancesApi::init() {
    setupRoutes();
}

void ConfigInstancesApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/config_instances/deployed", Routes::bind(&ConfigInstancesApi::get_latest_config_instance_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ConfigInstancesApi::config_instances_api_default_handler, this));
}

void ConfigInstancesApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ConfigInstancesApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void ConfigInstancesApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> ConfigInstancesApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void ConfigInstancesApi::get_latest_config_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto configSchemaDigestQuery = request.query().get("config_schema_digest");
    std::optional<std::string> configSchemaDigest;
    if(configSchemaDigestQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(configSchemaDigestQuery.value(), valueQuery_instance)){
            configSchemaDigest = valueQuery_instance;
        }
    }
    auto configTypeSlugQuery = request.query().get("config_type_slug");
    std::optional<std::string> configTypeSlug;
    if(configTypeSlugQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(configTypeSlugQuery.value(), valueQuery_instance)){
            configTypeSlug = valueQuery_instance;
        }
    }
    
    try {
        this->get_latest_config_instance(configSchemaDigest, configTypeSlug, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void ConfigInstancesApi::config_instances_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

