/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BaseConfigInstance.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json BaseConfigInstance::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

BaseConfigInstance BaseConfigInstance::from_json(const nlohmann::json& j)
{
    BaseConfigInstance o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void BaseConfigInstance::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BaseConfigInstance::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BaseConfigInstance::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BaseConfigInstance" : pathPrefix;

                                                
    return success;
}

bool BaseConfigInstance::operator==(const BaseConfigInstance& other) const
{
    return
    
    object == other.object && id == other.id && target_status == other.target_status && status == other.status && activity_status == other.activity_status && error_status == other.error_status && relative_filepath == other.relative_filepath && created_at == other.created_at && updated_at == other.updated_at && config_schema_id == other.config_schema_id && config_type_id == other.config_type_id;
}

bool BaseConfigInstance::operator!=(const BaseConfigInstance& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const BaseConfigInstance& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["id"] = o.id;
    j["target_status"] = o.target_status;
    j["status"] = o.status;
    j["activity_status"] = o.activity_status;
    j["error_status"] = o.error_status;
    if (o.relative_filepath.has_value()) {
        j["relative_filepath"] = o.relative_filepath.value();
    } else {
        j["relative_filepath"] = nullptr;
    }
    j["created_at"] = o.created_at;
    j["updated_at"] = o.updated_at;
    j["config_schema_id"] = o.config_schema_id;
    j["config_type_id"] = o.config_type_id;
    
}

void from_json(const nlohmann::json& j, BaseConfigInstance& o)
{
    j.at("object").get_to(o.object);
    j.at("id").get_to(o.id);
    j.at("target_status").get_to(o.target_status);
    j.at("status").get_to(o.status);
    j.at("activity_status").get_to(o.activity_status);
    j.at("error_status").get_to(o.error_status);
    if (j.find("relative_filepath") != j.end()) {
        if (j.at("relative_filepath").is_null()) {
            o.relative_filepath = std::nullopt;
        } else {
            o.relative_filepath = j.at("relative_filepath").get<std::string>();
        }
    }
    j.at("created_at").get_to(o.created_at);
    j.at("updated_at").get_to(o.updated_at);
    j.at("config_schema_id").get_to(o.config_schema_id);
    j.at("config_type_id").get_to(o.config_type_id);
    
}

} // namespace org::openapitools::server::model

