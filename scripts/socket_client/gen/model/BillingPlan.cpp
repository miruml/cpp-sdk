/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BillingPlan.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json BillingPlan::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

BillingPlan BillingPlan::from_json(const nlohmann::json& j)
{
    BillingPlan o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void BillingPlan::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BillingPlan::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BillingPlan::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BillingPlan" : pathPrefix;

    
    if (value == BillingPlan::eBillingPlan::INVALID_VALUE_OPENAPI_GENERATED)
    {
        success = false;
        msg << _pathPrefix << ": has no value;";
    }

    return success;
}

bool BillingPlan::operator==(const BillingPlan& other) const
{
    return
    value == other.value
    ;
}

bool BillingPlan::operator!=(const BillingPlan& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const BillingPlan& o)
{
    j = nlohmann::json::object();
    
    switch (o.value)
    {
    case BillingPlan::eBillingPlan::INVALID_VALUE_OPENAPI_GENERATED:
        j = "INVALID_VALUE_OPENAPI_GENERATED";
        break;
    case BillingPlan::eBillingPlan::BILLING_PLAN_HOBBY:
        j = "hobby";
        break;
    case BillingPlan::eBillingPlan::BILLING_PLAN_STARTUP:
        j = "startup";
        break;
    case BillingPlan::eBillingPlan::BILLING_PLAN_ENTERPRISE:
        j = "enterprise";
        break;
    }
}

void from_json(const nlohmann::json& j, BillingPlan& o)
{
    
    auto s = j.get<std::string>();
    if(s == "hobby") {
        o.value = BillingPlan::eBillingPlan::BILLING_PLAN_HOBBY;
    } 
    else if(s == "startup") {
        o.value = BillingPlan::eBillingPlan::BILLING_PLAN_STARTUP;
    } 
    else if(s == "enterprise") {
        o.value = BillingPlan::eBillingPlan::BILLING_PLAN_ENTERPRISE;
    }  else {
        std::stringstream ss;
        ss << "Unexpected value " << s << " in json"
           << " cannot be converted to enum of type"
           << " BillingPlan::eBillingPlan";
        throw std::invalid_argument(ss.str());
    } 
    
}

} // namespace org::openapitools::server::model

