/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GitCommit.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json GitCommit::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

GitCommit GitCommit::from_json(const nlohmann::json& j)
{
    GitCommit o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void GitCommit::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GitCommit::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GitCommit::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GitCommit" : pathPrefix;

                                                                
    return success;
}

bool GitCommit::operator==(const GitCommit& other) const
{
    return
    
    object == other.object && id == other.id && commit_sha == other.commit_sha && commit_message == other.commit_message && branch == other.branch && repository_owner == other.repository_owner && repository_name == other.repository_name && repository_type == other.repository_type && repository_url == other.repository_url && branch_url == other.branch_url && commit_url == other.commit_url && created_at == other.created_at && created_by_id == other.created_by_id && created_by == other.created_by && config_schema_git_commits == other.config_schema_git_commits;
}

bool GitCommit::operator!=(const GitCommit& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const GitCommit& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["id"] = o.id;
    j["commit_sha"] = o.commit_sha;
    j["commit_message"] = o.commit_message;
    j["branch"] = o.branch;
    j["repository_owner"] = o.repository_owner;
    j["repository_name"] = o.repository_name;
    j["repository_type"] = o.repository_type;
    j["repository_url"] = o.repository_url;
    j["branch_url"] = o.branch_url;
    j["commit_url"] = o.commit_url;
    j["created_at"] = o.created_at;
    if (o.created_by_id.has_value()) {
        j["created_by_id"] = o.created_by_id.value();
    } else {
        j["created_by_id"] = nullptr;
    }
    if (o.created_by.has_value()) {
        j["created_by"] = o.created_by.value();
    } else {
        j["created_by"] = nullptr;
    }
    if (o.config_schema_git_commits.has_value()) {
        j["config_schema_git_commits"] = o.config_schema_git_commits.value();
    }
    
}

void from_json(const nlohmann::json& j, GitCommit& o)
{
    j.at("object").get_to(o.object);
    j.at("id").get_to(o.id);
    j.at("commit_sha").get_to(o.commit_sha);
    j.at("commit_message").get_to(o.commit_message);
    j.at("branch").get_to(o.branch);
    j.at("repository_owner").get_to(o.repository_owner);
    j.at("repository_name").get_to(o.repository_name);
    j.at("repository_type").get_to(o.repository_type);
    j.at("repository_url").get_to(o.repository_url);
    j.at("branch_url").get_to(o.branch_url);
    j.at("commit_url").get_to(o.commit_url);
    j.at("created_at").get_to(o.created_at);
    if (j.find("created_by_id") != j.end()) {
        if (j.at("created_by_id").is_null()) {
            o.created_by_id = std::nullopt;
        } else {
            o.created_by_id = j.at("created_by_id").get<std::string>();
        }
    }
    if (j.find("created_by") != j.end()) {
        if (j.at("created_by").is_null()) {
            o.created_by = std::nullopt;
        } else {
            o.created_by = j.at("created_by").get<org::openapitools::server::model::User>();
        }
    }
    if (j.find("config_schema_git_commits") != j.end()) {
        if (j.at("config_schema_git_commits").is_null()) {
            o.config_schema_git_commits = std::nullopt;
        } else {
            o.config_schema_git_commits = j.at("config_schema_git_commits").get<org::openapitools::server::model::ConfigSchemaGitCommitList>();
        }
    }
    
}

} // namespace org::openapitools::server::model

