/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ClientTag.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json ClientTag::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

ClientTag ClientTag::from_json(const nlohmann::json& j)
{
    ClientTag o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void ClientTag::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ClientTag::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ClientTag::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ClientTag" : pathPrefix;

                                    
    return success;
}

bool ClientTag::operator==(const ClientTag& other) const
{
    return
    
    object == other.object && created_at == other.created_at && created_by_id == other.created_by_id && client_id == other.client_id && tag_id == other.tag_id && created_by == other.created_by && client == other.client && tag == other.tag;
}

bool ClientTag::operator!=(const ClientTag& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const ClientTag& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["created_at"] = o.created_at;
    if (o.created_by_id.has_value()) {
        j["created_by_id"] = o.created_by_id.value();
    } else {
        j["created_by_id"] = nullptr;
    }
    if (o.client_id.has_value()) {
        j["client_id"] = o.client_id.value();
    }
    if (o.tag_id.has_value()) {
        j["tag_id"] = o.tag_id.value();
    }
    if (o.created_by.has_value()) {
        j["created_by"] = o.created_by.value();
    } else {
        j["created_by"] = nullptr;
    }
    if (o.client.has_value()) {
        j["client"] = o.client.value();
    }
    if (o.tag.has_value()) {
        j["tag"] = o.tag.value();
    } else {
        j["tag"] = nullptr;
    }
    
}

void from_json(const nlohmann::json& j, ClientTag& o)
{
    j.at("object").get_to(o.object);
    j.at("created_at").get_to(o.created_at);
    if (j.find("created_by_id") != j.end()) {
        if (j.at("created_by_id").is_null()) {
            o.created_by_id = std::nullopt;
        } else {
            o.created_by_id = j.at("created_by_id").get<std::string>();
        }
    }
    if (j.find("client_id") != j.end()) {
        if (j.at("client_id").is_null()) {
            o.client_id = std::nullopt;
        } else {
            o.client_id = j.at("client_id").get<std::string>();
        }
    }
    if (j.find("tag_id") != j.end()) {
        if (j.at("tag_id").is_null()) {
            o.tag_id = std::nullopt;
        } else {
            o.tag_id = j.at("tag_id").get<std::string>();
        }
    }
    if (j.find("created_by") != j.end()) {
        if (j.at("created_by").is_null()) {
            o.created_by = std::nullopt;
        } else {
            o.created_by = j.at("created_by").get<org::openapitools::server::model::User>();
        }
    }
    if (j.find("client") != j.end()) {
        if (j.at("client").is_null()) {
            o.client = std::nullopt;
        } else {
            o.client = j.at("client").get<org::openapitools::server::model::Client>();
        }
    }
    if (j.find("tag") != j.end()) {
        if (j.at("tag").is_null()) {
            o.tag = std::nullopt;
        } else {
            o.tag = j.at("tag").get<org::openapitools::server::model::Tag>();
        }
    }
    
}

} // namespace org::openapitools::server::model

