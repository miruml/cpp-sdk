/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "User.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json User::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

User User::from_json(const nlohmann::json& j)
{
    User o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void User::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool User::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool User::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "User" : pathPrefix;

                                        
    return success;
}

bool User::operator==(const User& other) const
{
    return
    
    object == other.object && id == other.id && email == other.email && first_name == other.first_name && last_name == other.last_name && created_at == other.created_at && updated_at == other.updated_at && workspace_id == other.workspace_id && workspace == other.workspace;
}

bool User::operator!=(const User& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const User& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["id"] = o.id;
    j["email"] = o.email;
    if (o.first_name.has_value()) {
        j["first_name"] = o.first_name.value();
    } else {
        j["first_name"] = nullptr;
    }
    if (o.last_name.has_value()) {
        j["last_name"] = o.last_name.value();
    } else {
        j["last_name"] = nullptr;
    }
    j["created_at"] = o.created_at;
    j["updated_at"] = o.updated_at;
    j["workspace_id"] = o.workspace_id;
    if (o.workspace.has_value()) {
        j["workspace"] = o.workspace.value();
    } else {
        j["workspace"] = nullptr;
    }
    
}

void from_json(const nlohmann::json& j, User& o)
{
    j.at("object").get_to(o.object);
    j.at("id").get_to(o.id);
    j.at("email").get_to(o.email);
    if (j.find("first_name") != j.end()) {
        if (j.at("first_name").is_null()) {
            o.first_name = std::nullopt;
        } else {
            o.first_name = j.at("first_name").get<std::string>();
        }
    }
    if (j.find("last_name") != j.end()) {
        if (j.at("last_name").is_null()) {
            o.last_name = std::nullopt;
        } else {
            o.last_name = j.at("last_name").get<std::string>();
        }
    }
    j.at("created_at").get_to(o.created_at);
    j.at("updated_at").get_to(o.updated_at);
    j.at("workspace_id").get_to(o.workspace_id);
    if (j.find("workspace") != j.end()) {
        if (j.at("workspace").is_null()) {
            o.workspace = std::nullopt;
        } else {
            o.workspace = j.at("workspace").get<org::openapitools::server::model::Workspace>();
        }
    }
    
}

} // namespace org::openapitools::server::model

