/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ConfigSchema.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json ConfigSchema::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

ConfigSchema ConfigSchema::from_json(const nlohmann::json& j)
{
    ConfigSchema o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void ConfigSchema::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ConfigSchema::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConfigSchema::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConfigSchema" : pathPrefix;

                                                    
    return success;
}

bool ConfigSchema::operator==(const ConfigSchema& other) const
{
    return
    
    object == other.object && id == other.id && version == other.version && digest == other.digest && created_at == other.created_at && created_by_id == other.created_by_id && config_id == other.config_id && created_by == other.created_by && schema == other.schema && config == other.config && config_schema_git_commits == other.config_schema_git_commits && overrides == other.overrides;
}

bool ConfigSchema::operator!=(const ConfigSchema& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const ConfigSchema& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["id"] = o.id;
    j["version"] = o.version;
    j["digest"] = o.digest;
    j["created_at"] = o.created_at;
    if (o.created_by_id.has_value()) {
        j["created_by_id"] = o.created_by_id.value();
    } else {
        j["created_by_id"] = nullptr;
    }
    j["config_id"] = o.config_id;
    if (o.created_by.has_value()) {
        j["created_by"] = o.created_by.value();
    } else {
        j["created_by"] = nullptr;
    }
    if (o.schema.has_value()) {
        j["schema"] = o.schema.value();
    } else {
        j["schema"] = nullptr;
    }
    if (o.config.has_value()) {
        j["config"] = o.config.value();
    } else {
        j["config"] = nullptr;
    }
    if (o.config_schema_git_commits.has_value()) {
        j["config_schema_git_commits"] = o.config_schema_git_commits.value();
    } else {
        j["config_schema_git_commits"] = nullptr;
    }
    if (o.overrides.has_value()) {
        j["overrides"] = o.overrides.value();
    } else {
        j["overrides"] = nullptr;
    }
    
}

void from_json(const nlohmann::json& j, ConfigSchema& o)
{
    j.at("object").get_to(o.object);
    j.at("id").get_to(o.id);
    j.at("version").get_to(o.version);
    j.at("digest").get_to(o.digest);
    j.at("created_at").get_to(o.created_at);
    if (j.find("created_by_id") != j.end()) {
        if (j.at("created_by_id").is_null()) {
            o.created_by_id = std::nullopt;
        } else {
            o.created_by_id = j.at("created_by_id").get<std::string>();
        }
    }
    j.at("config_id").get_to(o.config_id);
    if (j.find("created_by") != j.end()) {
        if (j.at("created_by").is_null()) {
            o.created_by = std::nullopt;
        } else {
            o.created_by = j.at("created_by").get<org::openapitools::server::model::User>();
        }
    }
    if (j.find("schema") != j.end()) {
        if (j.at("schema").is_null()) {
            o.schema = std::nullopt;
        } else {
            o.schema = j.at("schema").get<nlohmann::json>();
        }
    }
    if (j.find("config") != j.end()) {
        if (j.at("config").is_null()) {
            o.config = std::nullopt;
        } else {
            o.config = j.at("config").get<org::openapitools::server::model::Config>();
        }
    }
    if (j.find("config_schema_git_commits") != j.end()) {
        if (j.at("config_schema_git_commits").is_null()) {
            o.config_schema_git_commits = std::nullopt;
        } else {
            o.config_schema_git_commits = j.at("config_schema_git_commits").get<org::openapitools::server::model::ConfigSchemaGitCommitList>();
        }
    }
    if (j.find("overrides") != j.end()) {
        if (j.at("overrides").is_null()) {
            o.overrides = std::nullopt;
        } else {
            o.overrides = j.at("overrides").get<org::openapitools::server::model::OverrideList>();
        }
    }
    
}

} // namespace org::openapitools::server::model

