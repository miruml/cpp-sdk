/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PaginatedList.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json PaginatedList::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

PaginatedList PaginatedList::from_json(const nlohmann::json& j)
{
    PaginatedList o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void PaginatedList::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PaginatedList::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PaginatedList::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PaginatedList" : pathPrefix;

                                
    return success;
}

bool PaginatedList::operator==(const PaginatedList& other) const
{
    return
    
    object == other.object && total_count == other.total_count && limit == other.limit && offset == other.offset && next == other.next && previous == other.previous && has_more == other.has_more;
}

bool PaginatedList::operator!=(const PaginatedList& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const PaginatedList& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["total_count"] = o.total_count;
    j["limit"] = o.limit;
    j["offset"] = o.offset;
    if (o.next.has_value()) {
        j["next"] = o.next.value();
    } else {
        j["next"] = nullptr;
    }
    if (o.previous.has_value()) {
        j["previous"] = o.previous.value();
    } else {
        j["previous"] = nullptr;
    }
    j["has_more"] = o.has_more;
    
}

void from_json(const nlohmann::json& j, PaginatedList& o)
{
    j.at("object").get_to(o.object);
    j.at("total_count").get_to(o.total_count);
    j.at("limit").get_to(o.limit);
    j.at("offset").get_to(o.offset);
    if (j.find("next") != j.end()) {
        if (j.at("next").is_null()) {
            o.next = std::nullopt;
        } else {
            o.next = j.at("next").get<std::string>();
        }
    }
    if (j.find("previous") != j.end()) {
        if (j.at("previous").is_null()) {
            o.previous = std::nullopt;
        } else {
            o.previous = j.at("previous").get<std::string>();
        }
    }
    j.at("has_more").get_to(o.has_more);
    
}

} // namespace org::openapitools::server::model

