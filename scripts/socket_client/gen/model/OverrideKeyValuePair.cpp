/**
* Miru API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 0.1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OverrideKeyValuePair.h"
#include "Helpers.h"

namespace org::openapitools::server::model
{

nlohmann::json OverrideKeyValuePair::to_json() const
{
    nlohmann::json j;
    ::org::openapitools::server::model::to_json(j, *this);
    return j;
}

OverrideKeyValuePair OverrideKeyValuePair::from_json(const nlohmann::json& j)
{
    OverrideKeyValuePair o{};
    ::org::openapitools::server::model::from_json(j, o);
    return o;
}

void OverrideKeyValuePair::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool OverrideKeyValuePair::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool OverrideKeyValuePair::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "OverrideKeyValuePair" : pathPrefix;

                 
    
    /* schema_path */ {
        const std::vector<std::string>& value = schema_path;
        const std::string currentValuePath = _pathPrefix + ".schemaPath";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                                    
    return success;
}

bool OverrideKeyValuePair::operator==(const OverrideKeyValuePair& other) const
{
    return
    
    object == other.object && id == other.id && schema_path == other.schema_path && created_at == other.created_at && updated_at == other.updated_at && created_by_id == other.created_by_id && updated_by_id == other.updated_by_id && tag_type_field_id == other.tag_type_field_id && created_by == other.created_by && updated_by == other.updated_by && tag_type_field == other.tag_type_field;
}

bool OverrideKeyValuePair::operator!=(const OverrideKeyValuePair& other) const
{
    return !(*this == other);
}

void to_json(nlohmann::json& j, const OverrideKeyValuePair& o)
{
    j = nlohmann::json::object();
    j["object"] = o.object;
    j["id"] = o.id;
    j["schema_path"] = o.schema_path;
    j["created_at"] = o.created_at;
    j["updated_at"] = o.updated_at;
    if (o.created_by_id.has_value()) {
        j["created_by_id"] = o.created_by_id.value();
    } else {
        j["created_by_id"] = nullptr;
    }
    if (o.updated_by_id.has_value()) {
        j["updated_by_id"] = o.updated_by_id.value();
    } else {
        j["updated_by_id"] = nullptr;
    }
    if (o.tag_type_field_id.has_value()) {
        j["tag_type_field_id"] = o.tag_type_field_id.value();
    } else {
        j["tag_type_field_id"] = nullptr;
    }
    if (o.created_by.has_value()) {
        j["created_by"] = o.created_by.value();
    } else {
        j["created_by"] = nullptr;
    }
    if (o.updated_by.has_value()) {
        j["updated_by"] = o.updated_by.value();
    } else {
        j["updated_by"] = nullptr;
    }
    if (o.tag_type_field.has_value()) {
        j["tag_type_field"] = o.tag_type_field.value();
    } else {
        j["tag_type_field"] = nullptr;
    }
    
}

void from_json(const nlohmann::json& j, OverrideKeyValuePair& o)
{
    j.at("object").get_to(o.object);
    j.at("id").get_to(o.id);
    j.at("schema_path").get_to(o.schema_path);
    j.at("created_at").get_to(o.created_at);
    j.at("updated_at").get_to(o.updated_at);
    if (j.find("created_by_id") != j.end()) {
        if (j.at("created_by_id").is_null()) {
            o.created_by_id = std::nullopt;
        } else {
            o.created_by_id = j.at("created_by_id").get<std::string>();
        }
    }
    if (j.find("updated_by_id") != j.end()) {
        if (j.at("updated_by_id").is_null()) {
            o.updated_by_id = std::nullopt;
        } else {
            o.updated_by_id = j.at("updated_by_id").get<std::string>();
        }
    }
    if (j.find("tag_type_field_id") != j.end()) {
        if (j.at("tag_type_field_id").is_null()) {
            o.tag_type_field_id = std::nullopt;
        } else {
            o.tag_type_field_id = j.at("tag_type_field_id").get<std::string>();
        }
    }
    if (j.find("created_by") != j.end()) {
        if (j.at("created_by").is_null()) {
            o.created_by = std::nullopt;
        } else {
            o.created_by = j.at("created_by").get<org::openapitools::server::model::User>();
        }
    }
    if (j.find("updated_by") != j.end()) {
        if (j.at("updated_by").is_null()) {
            o.updated_by = std::nullopt;
        } else {
            o.updated_by = j.at("updated_by").get<org::openapitools::server::model::User>();
        }
    }
    if (j.find("tag_type_field") != j.end()) {
        if (j.at("tag_type_field").is_null()) {
            o.tag_type_field = std::nullopt;
        } else {
            o.tag_type_field = j.at("tag_type_field").get<org::openapitools::server::model::TagTypeField>();
        }
    }
    
}

} // namespace org::openapitools::server::model

